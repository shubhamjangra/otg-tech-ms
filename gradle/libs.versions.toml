[versions]
java = "17"
springBoot = "3.2.5"
springDependencyManagement = "1.1.4"
springDataEnvers = "2.7.15"
springCloud = "2023.0.1"
springCloudNetflixHystrix = "2.2.10.RELEASE"
spring = "6.1.6"
springDoc = "2.5.0"
sonarqube = "3.3"
jackson = "2.15.2"
hibernateTypes = "3.5.2"
hibernateCore = "6.1.0.Final"
testContainers = "1.16.3"
javaTuples = "1.2"
sl4j = "2.0.7"
lombok = "1.18.30"
servlet = "6.0.0"
assertj = "3.24.2"
junit = "5.10.0"
archunit = "1.1.0"
gitProperties = "2.4.1"
feignJackson = "8.18.0"
kafka = "3.1.1"
aop = "1.9.20"
docker = "0.35.0"
dbScheduler = "12.5.0"
jsonPath = "2.7.0"
mustache = "0.9.10"
logstash = "7.0.1"
okhttp = "4.12.0"
awssdk = "1.12.429"
apacheCommons3 = "3.13.0"
jaegerClient = "1.8.1"
hibernateVladmihalcea = "3.5.2"
googleGuava = "32.0.1-jre"
opentelemetrySdk = "1.31.0"
opentelemetryExporterJaeger = "1.31.0"
thymeleaf = "3.1.1.RELEASE"
flyingSaucerPdf = "9.1.22"
jsoup = "1.16.1"
springAspects = "6.0.9"
springCloudOpenFeign = "4.0.4"
springPropertiesMigration = "3.0.3"
openSearch = "2.6.0"
mockitoInline = "5.2.0"
powerMockModule = "2.0.9"
powerMockApi = "2.0.9"
googleApiClient = "2.2.0"
mapstructProcessor = "1.5.5.Final"
lombokBinding = "0.2.0"
junitLib = "4.13.2"
mapstruct = "1.5.3.Final"
firebaseAdmin = "9.2.0"
mockitoJupiterJnit = "5.2.0"
feignOkhttp = "13.0"
apachePoi = "5.2.2"
xmlworker = "5.5.13.3"
flyingSaucer = "9.1.22"
lsjxls = "2.12.0"
commonscodec = "1.15"
itextHtml2Pdf = "4.0.4"
springThymeLeaf = "2.7.5"
componentsHttpClient = "4.5.3"
modelmapper = "2.1.1"
awaitility = "4.2.0"
opencsv = "4.1"
commonsFileupload = "1.5"
jobrunr = "5.3.3"
snakeyml = "2.0"
h2database = "2.2.224"
gson = "2.10.1"

[libraries]
springBoot = { module = "org.springframework.boot:spring-boot", version.ref = "springBoot" }
springCloud = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "springCloud" }
springCloudNetflixHystrix = { module = "org.springframework.cloud:spring-cloud-starter-netflix-hystrix", version.ref = "springCloudNetflixHystrix" }
springDoc = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springDoc" }
spring = { module = "org.springframework:spring-framework-bom", version.ref = "spring" }
springStarterOpenfeign = { module = "org.springframework.cloud:spring-cloud-starter-openfeign", version.ref = "springCloudOpenFeign" }
springpersistence = { module = "jakarta.persistence:jakarta.persistence-api", version = "3.1.0" }
springAutoConfigure = { module = "org.springframework.boot:spring-boot-autoconfigure", version.ref = "springBoot" }
springBootTest = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "springBoot" }
aspectjrt = { module = "org.aspectj:aspectjrt", version.ref = "aop" }
aspectjweaver = { module = "org.aspectj:aspectjweaver", version.ref = "aop" }
javaTuples = { module = "org.javatuples:javatuples", version.ref = "javaTuples" }
postgresTestContainer = { module = "org.testcontainers:postgresql", version.ref = "testContainers" }
junitTestContainer = { module = "org.testcontainers:junit-jupiter", version.ref = "testContainers" }
jackson = { module = "com.fasterxml.jackson:jackson-bom", version.ref = "jackson" }
sl4j = { module = "org.slf4j:slf4j-api", version.ref = "sl4j" }
lombok = { module = "org.projectlombok:lombok", version.ref = "lombok" }
servlet = { module = "jakarta.servlet:jakarta.servlet-api", version.ref = "servlet" }
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
sl4jSimple = { module = "org.slf4j:slf4j-simple", version.ref = "sl4j" }
junitJupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
junitApi = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junitEngine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
archunit = { module = "com.tngtech.archunit:archunit-junit5", version.ref = "archunit" }
archunitApi = { module = "com.tngtech.archunit:archunit-junit5-api", version.ref = "archunit" }
feignJackson = { module = "com.netflix.feign:feign-jackson", version.ref = "feignJackson" }
kafka = { module = "org.springframework.kafka:spring-kafka", version.ref = "kafka" }
kafkaTest = { module = "org.springframework.kafka:spring-kafka-test", version.ref = "kafka" }
springStarterAop = { module = "org.springframework.boot:spring-boot-starter-aop", version.ref = "springBoot" }
hibernateTypes = { module = "io.hypersistence:hypersistence-utils-hibernate-62", version.ref = "hibernateTypes" }
dbScheduler = { module = "com.github.kagkarlsson:db-scheduler-spring-boot-starter", version.ref = "dbScheduler" }
jsonPath = { module = "com.jayway.jsonpath:json-path", version.ref = "jsonPath" }
mustache = { module = "com.github.spullara.mustache.java:compiler", version.ref = "mustache" }
logstash = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttpMockWebServer = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp" }
awssdk = { module = "com.amazonaws:aws-java-sdk", version.ref = "awssdk" }
apacheCommons3 = { module = "org.apache.commons:commons-lang3", version.ref = "apacheCommons3" }
jaegerClient = { module = "io.jaegertracing:jaeger-client", version.ref = "jaegerClient" }
springStarterCache = { module = "org.springframework.boot:spring-boot-starter-cache", version.ref = "springBoot" }
jacksonDatabind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
springOauth2 = { module = "org.springframework.boot:spring-boot-starter-oauth2-resource-server", version.ref = "springBoot" }
springStarterWeb = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "springBoot" }
springStarterSecurity = { module = "org.springframework.boot:spring-boot-starter-security", version.ref = "springBoot" }
springDataEnvers = { module = "org.springframework.data:spring-data-envers", version.ref = "springBoot" }
jacksonDataType = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jacksonDataTypeJdk8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jdk8", version.ref = "jackson" }
googleGuava = { module = "com.google.guava:guava", version.ref = 'googleGuava' }
opentelemetrySdk = { module = "io.opentelemetry:opentelemetry-sdk", version.ref = 'opentelemetrySdk' }
opentelemetryExporterJaeger = { module = "io.opentelemetry:opentelemetry-exporter-jaeger", version.ref = 'opentelemetryExporterJaeger' }
thymeleaf = { module = "org.thymeleaf:thymeleaf", version.ref = 'thymeleaf' }
flyingSaucerPdf = { module = "org.xhtmlrenderer:flying-saucer-pdf", version.ref = 'flyingSaucerPdf' }
jsoup = { module = "org.jsoup:jsoup", version.ref = 'jsoup' }
springAspects = { module = "org.springframework:spring-aspects", version.ref = 'springAspects' }
springCloudOpenFeign = { module = "org.springframework.cloud:spring-cloud-starter-openfeign", version.ref = 'springCloudOpenFeign' }
springPropertiesMigration = { module = "org.springframework.boot:spring-boot-properties-migrator", version.ref = 'springPropertiesMigration' }
openSearch = { module = "org.opensearch.client:opensearch-rest-high-level-client", version.ref = 'openSearch' }
mockitoInline = { module = "org.mockito:mockito-inline", version.ref = 'mockitoInline' }
powerMockModule = { module = "org.powermock:powermock-module-junit4", version.ref = 'powerMockModule' }
powerMockApi = { module = "org.powermock:powermock-api-mockito2", version.ref = 'powerMockApi' }
googleApiClient = { module = "com.google.api-client:google-api-client", version.ref = 'googleApiClient' }
mapstructProcessor = { module = "org.mapstruct:mapstruct-processor", version.ref = 'mapstructProcessor' }
mapstruct = { module = "org.mapstruct:mapstruct", version.ref = 'mapstruct' }
lombokBinding = { module = "org.projectlombok:lombok-mapstruct-binding", version.ref = 'lombokBinding' }
junitLib = { module = "junit:junit", version.ref = 'junitLib' }
firebaseAdmin = { module = "com.google.firebase:firebase-admin", version.ref = 'firebaseAdmin' }
mockitoJupiterJnit = { module = "org.mockito:mockito-junit-jupiter", version.ref = 'mockitoJupiterJnit' }
feignOkhttp = { module = "io.github.openfeign:feign-okhttp", version.ref = 'feignOkhttp' }
apachePoi = { module = "org.apache.poi:poi", version.ref = 'apachePoi' }
poiooxml = { module = "org.apache.poi:poi-ooxml", version.ref = 'apachePoi' }
xmlworker = { module = "com.itextpdf.tool:xmlworker", version.ref = 'xmlworker' }
flyingSaucer = { module = "org.xhtmlrenderer:flying-saucer-pdf-itext5", version.ref = 'flyingSaucer' }
lsjxls = { module = "org.jxls:jxls", version.ref = 'lsjxls' }
lsjxlspoi = { module = "org.jxls:jxls-poi", version.ref = 'lsjxls' }
commonscodec = { module = "commons-codec:commons-codec", version.ref = 'commonscodec' }
itextHtml2Pdf = { module = "com.itextpdf:html2pdf", version.ref = 'itextHtml2Pdf' }
springThymeLeaf = { module = "org.springframework.boot:spring-boot-starter-thymeleaf", version.ref = 'springThymeLeaf' }
componentsHttpClient = { module = "org.apache.httpcomponents:httpclient", version.ref = 'componentsHttpClient' }
modelmapper = { module = "org.modelmapper:modelmapper", version.ref = 'modelmapper' }
awaitility = { module = "org.awaitility:awaitility", version.ref = 'awaitility' }
opencsv = { module = "com.opencsv:opencsv", version.ref = 'opencsv' }
commonsFileupload = { module = "commons-fileupload:commons-fileupload", version.ref = 'commonsFileupload' }
jobrunr = { module = "org.jobrunr:jobrunr-spring-boot-starter", version.ref = 'jobrunr' }
caffeine = { module = "com.github.ben-manes.caffeine:caffeine" }
h2database = { module = "com.h2database:h2", version.ref = 'h2database' }
gson = { module = "com.google.code.gson:gson", version.ref = 'gson' }
snakeyml = { module = "org.yaml:snakeyaml", version.ref = 'snakeyml' }
testng = { module = "org.testng:testng", version = "7.8.0" }

[plugins]
springBoot = { id = "org.springframework.boot", version.ref = "springBoot" }
springDependencyManagement = { id = "io.spring.dependency-management", version.ref = "springDependencyManagement" }
sonarqube = { id = "org.sonarqube", version.ref = "sonarqube" }
gitProperties = { id = "com.gorylenko.gradle-git-properties", version.ref = "gitProperties" }
docker = { id = "com.palantir.docker", version.ref = "docker" }
dependencycheck = { id = "org.owasp.dependencycheck", version = "8.4.0" }
springDependencyManagementOld = { id = "io.spring.dependency-management", version = "1.0.15.RELEASE" }
[bundles]
aopDeps = ["aspectjweaver", "aspectjrt"]
testContainerDeps = ["postgresTestContainer", "junitTestContainer"]
testSpringBootDeps = ["assertj", "springBootTest"]