plugins {
    alias(libs.plugins.springBoot)
    alias(libs.plugins.springDependencyManagement)
    id 'java'
    alias(libs.plugins.docker)
    alias(libs.plugins.sonarqube)
    id 'checkstyle'
    id 'jacoco'
    alias(libs.plugins.gitProperties)
}

group = 'com.otg.tech'
version = '0.1.0'
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(libs.versions.java.get())
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

jar {
    enabled = false
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'io.micrometer:micrometer-tracing:1.2.0'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave:1.2.0'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave:2.16.4'
    implementation 'org.springframework:spring-aop'
    implementation platform(libs.spring)
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation "com.otg.tech:common-objects"
    implementation "com.otg.tech:logging-utils"
    implementation "com.otg.tech:auditing-utils"
    implementation 'com.otg.tech:event-publisher'
    implementation libs.kafka
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation libs.h2database
    testImplementation(group: 'com.squareup.okhttp3', name: 'mockwebserver', version: libs.versions.okhttp.get()) {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
    }
    testImplementation 'com.otg.tech:archunit-tests'
    implementation libs.hibernateTypes
    implementation platform(libs.springCloud)
    implementation libs.firebaseAdmin
    implementation libs.logstash
    implementation libs.springDoc
    implementation libs.springCloudOpenFeign
    implementation libs.dbScheduler
    implementation libs.jsonPath
    implementation libs.mustache
    testImplementation libs.okhttp
    testImplementation libs.kafkaTest
    implementation libs.logstash
    implementation libs.servlet
    testImplementation libs.mockitoInline
    implementation 'com.amazonaws:aws-java-sdk-iot:1.12.506'
    implementation 'com.amazonaws:aws-iot-device-sdk-java:1.3.11'
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/otg/tech/notification/config/**",
                    "com/otg/tech/notification/constant/**",
                    "com/otg/tech/notification/domain/**",
                    "com/otg/tech/notification/exception/**",
                    "com/otg/tech/notification/repository/**",
                    "com/otg/tech/notification/scheduler/**",
                    "com/otg/tech/notification/service/http/**",
                    "com/otg/tech/notification/controller/CacheController"
            ])
        }))
    }
    reports {
        html.required = true
        xml.required = true
    }
}
test.finalizedBy jacocoTestReport

test {
    useJUnitPlatform()
    testLogging {
        events("passed", "failed", "skipped")
    }
}

docker {
    dependsOn bootJar
    name "${project.group}/${jar.archiveBaseName.get()}:${version}"
    copySpec.from("build/libs").into("libs")
    dockerfile file('src/main/resources/docker/Dockerfile')
}

tasks.withType(Checkstyle).configureEach {
    configFile file('codequality/checkstyle.xml')
    checkstyleTest.enabled = false
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}
sonarqube {
    properties {
        property 'sonar.coverage.exclusions', "**/config/**, **/constant/**, **/domain/**, **/service/http/**, **/exception/**, **/repository/**, **/scheduler/**, **/util/**"
    }
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "IST"
}

springBoot {
    buildInfo()
}

dependencyLocking {
    lockAllConfigurations()
}
checkstyle {
    toolVersion = "10.12.4"
}
configurations.implementation {
    exclude group: 'org.xerial.snappy', module: 'snappy-java'
}
